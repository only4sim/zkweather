---
description: 
globs: 
alwaysApply: false
---
---

description: Cursor rule for generating a Hedera‑ready task list from a PRD
globs:

## alwaysApply: false

# Rule: Generating a Task List from a PRD (Hedera‑Hackathon Edition)

## Goal

To guide an AI assistant in creating a detailed, step‑by‑step task list in Markdown format based on an existing Product Requirements Document (PRD). The task list should lead a developer—especially a **junior developer**—through implementation **while satisfying Hedera hackathon requirements**.

## Output

* **Format:** Markdown (`.md`)
* **Location:** `/tasks/`
* **Filename:** `tasks-[prd-file-name].md` (e.g., `tasks-prd-user-profile-editing.md`)

## Process

1. **Receive PRD Reference:** The user points the AI to a specific PRD file.
2. **Analyse PRD:** Parse functional requirements, integration plans, and acceptance criteria.
3. **Phase 1 – Generate Parent Tasks:**

   * Derive the main high-level parent tasks covering all major work streams, including **Hedera integration**, **testing**, **documentation**, and **deployment / verification**. Use your judgement on how many high-level tasks to use. It's likely to be about 5.
   * Present the parent tasks to the user in the required format (no sub‑tasks yet).
   * End with: *"I have generated the high‑level tasks based on the PRD. Ready to generate the sub‑tasks? Respond with ****************Go**************** to proceed."*
4. **Wait for Confirmation:** Pause until the user replies "Go".
5. **Phase 2 – Generate Sub‑Tasks:**

   * Break each parent task into atomic, actionable sub‑tasks.
   * Include tasks for:

     * \*\*Hedera Service Setup & Integration (if not done yet) \*\* – SDK setup or JSON‑RPC tooling, account configuration, contract compilation & deployment, Mirror Node queries, etc.
     * **Testing & Verification** – Unit tests, integration tests, and **HashScan verification** steps.
     * **Documentation & Demo** – Writing `README.md`, developer guide, demo script, and recording instructions for the video.
     * **Human‑in‑the‑Loop Tasks** – Where human steps are required (e.g., uploading artifacts to HashScan, recording video), create sub‑tasks prefixed with **\[Human]**.
6. **Identify Relevant Files:** List potential code, contract, config, test, and documentation files under `## Relevant Files`, with brief descriptions.
7. **Generate Final Output:** Combine parent tasks, sub‑tasks, relevant files, and notes using the structure below.
8. **Save Task List:** Write the file to `/tasks/` with the correct filename.

## Output Format

The generated task list _must_ follow this structure:

```markdown
## Relevant Files

- `path/to/potential/file1.ts` - Brief description of why this file is relevant (e.g., Contains the main component for this feature).
- `path/to/file1.test.ts` - Unit tests for `file1.ts`.
- `path/to/another/file.tsx` - Brief description (e.g., API route handler for data submission).
- `path/to/another/file.test.tsx` - Unit tests for `another/file.tsx`.
- `lib/utils/helpers.ts` - Brief description (e.g., Utility functions needed for calculations).
- `lib/utils/helpers.test.ts` - Unit tests for `helpers.ts`.

### Notes

- Unit tests should typically be placed alongside the code files they are testing (e.g., `MyComponent.tsx` and `MyComponent.test.tsx` in the same directory).
- Use `npx jest [optional/path/to/test/file]` to run tests. Running without a path executes all tests found by the Jest configuration.

## Tasks

- [ ] 1.0 Parent Task Title
  - [ ] 1.1 [Sub-task description 1.1]
  - [ ] 1.2 [Sub-task description 1.2]
- [ ] 2.0 Parent Task Title
  - [ ] 2.1 [Sub-task description 2.1]
- [ ] 3.0 Parent Task Title (may not require sub-tasks if purely structural or configuration)
```

## Interaction Model

The process explicitly requires a pause after generating parent tasks to get user confirmation ("Go") before proceeding to generate the detailed sub-tasks. This ensures the high-level plan aligns with user expectations before diving into details.

## Target Audience

Assume the primary reader of the task list is a **junior developer** who will implement the feature.
