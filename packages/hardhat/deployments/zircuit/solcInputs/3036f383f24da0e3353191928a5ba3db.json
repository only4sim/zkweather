{
  "language": "Solidity",
  "sources": {
    "contracts/YourContract.sol": {
      "content": "// WARNING: \n// THIS CODE IS SIMPLIFIED AND WAS CREATED FOR TESTING \n// PURPOSES ONLY. DO NOT USE THIS CODE IN PRODUCTION!\npragma solidity >=0.8.19 <0.9.0;\n\ncontract YourContract {\n    string public name = \"ZKP Token\";\n    string public symbol = \"ZKP\";\n\n    // The fixed amount of tokens, stored in an unsigned integer type variable.\n    uint256 public totalSupply = 21000000;\n\n    // An address type variable is used to store ethereum accounts.\n    address public owner;\n\n    // A mapping is a key/value map. Here we store each account's balance.\n    mapping(address => uint256) balances;\n\n    // The Transfer event helps off-chain applications understand\n    // what happens within your contract.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    constructor() {\n        balances[msg.sender] = totalSupply;\n        owner = msg.sender;\n    }\n\n    function transfer(address to, uint256 amount) external {\n        require(balances[msg.sender] >= amount, \"Not enough tokens\");\n\n        // Transfer the amount.\n        balances[msg.sender] -= amount;\n        balances[to] += amount;\n\n        // Notify off-chain applications of the transfer.\n        emit Transfer(msg.sender, to, amount);\n    }\n\n    function balanceOf(address account) external view returns (uint256) {\n        return balances[account];\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}